{"name":"Commons-test","body":"### Wiki page of this test tools.\r\nThis project give some lite tools for test unit writing.\r\nIt's base on framework [JUnit](http://www.junit.org/), [DBUnit](http://www.dbunit.org/) and [Mockito](http://code.google.com/p/mockito/).\r\n\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n\r\n### JUnit features :\r\n```\r\n@RunWith(Parameterized.class)\r\npublic class ParameterizedTest {\r\n\r\n  private final MyService service = new MyService();\r\n\r\n  @Parameters\r\n  public static Collection<Object[]> datas1() {\r\n    final Collection<Object[]> datas = new ArrayList<Object[]>();\r\n\r\n    datas.add(new Object[] { \"Paul\", \"Hello, Paul\", 1, new Object[] { \"test\", Double.valueOf(2.54689) } });\r\n    datas.add(new Object[] { \"Jack\", \"Hello, Jack\", 2, new String[] {} });\r\n    datas.add(new Object[] { \"my name is Patty  !\", \"Hello, my name is Patty  !\", 5, null });\r\n\r\n    return datas;\r\n  }\r\n\r\n  @TestParameterized\r\n  public void testGreet(final String name, final String expected, final int cpt, final Object[] vals) {\r\n    System.out.println(cpt + \", \" + ToStringBuilder.reflectionToString(vals, ToStringStyle.SHORT_PREFIX_STYLE));\r\n    assertThat(service.greet(name)).isEqualTo(expected);\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Mockito features :\r\n**Based on JUnit rule**\r\n```\r\npublic class MockingRuleTest {\r\n\r\n  @Rule\r\n  public MockingRule rule = MockingRule.init();\r\n\r\n  @Mock\r\n  private MyService mock;\r\n\r\n  @Spy\r\n  private MyService spy;\r\n\r\n  @Test\r\n  public void testRule() {\r\n    assertThat(MockingRule.init()).isNotNull();\r\n\r\n    assertThat(mock).isNotNull();\r\n    assertThat(spy).isNotNull();\r\n  }\r\n}\r\n```\r\n\r\n\r\n### DBUnit features :\r\nLoad datas with **@DataSet**, automaticly inject EntityManager if defined int class :\r\n```\r\n@DataSet(\"entities\")\r\npublic class DBUnitRuleTest {\r\n\r\n  private EntityManager em;\r\n\r\n  @Test\r\n  @DataSet(\"datas/others\")\r\n  public void testLoadOthers() {\r\n    assertThat(em).isNotNull();\r\n    final MyEntity entity = em.find(MyEntity.class, 20l);\r\n    assertEquals(Long.valueOf(20), entity.getId());\r\n    assertEquals(\"Pierre\", entity.getName());\r\n  }\r\n}\r\n```\r\n\r\n**@DataSet** can be defined for the entire class and/or for a specific method.\r\n\r\nTo activate DBUnit, 3 ways\r\n**a JUnit rule :**\r\n```\r\n  @Rule\r\n  public DBUnitRule dbUnitRule = DBUnitRule.init();\r\n```\r\n\r\n**an abstract class :**\r\n```\r\npublic class AbstractDBUnitTestTest extends AbstractDBUnitTest {\r\n```\r\n\r\n**a runner :**\r\n```\r\n@RunWith(DBUnitRunner.class)\r\npublic class DBUnitRunnerTest {\r\n```\r\n\r\nYou can define the rollback strategy with @Transactionnal.\r\nYou can redefined JPA config with @JpaConfig (by default the unit persistence name is 'pu-test').\r\n_note that you can not even change the persistence.xml file name, but soon I hope :)_\r\n\r\n### Support or Contact\r\nJulien Boz : \"julienboz\" on gmail ;)","tagline":"Utilitaires for testing","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}